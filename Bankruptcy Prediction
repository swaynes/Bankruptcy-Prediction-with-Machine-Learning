---
title: "R Notebook"
output: pdf_document
---
```{r}
if(!require("caret")){install.packages("caret")}
if(!require("tidyverse")){install.packages("tidyverse")}
if(!require("ISLR2")){install.packages("ISLR2")}
if(!require("boot")){install.packages("boot")}
if(!require("MASS") ){ install.packages("MASS") }
if(! require("leaps") ){ install.packages("leaps") }
if(! require("glmnet") ){ install.packages("glmnet") }
if(! require("pls") ){ install.packages("pls") }
if(!require("lmvar")) {install.packages("lmvar")}
if(!require("splines")) {install.packages("splines")}
library(boot)
library(caret)
library(tidyverse)
library(ISLR2)
library(MASS)
library(leaps)
library(glmnet)
library(pls)
library(lmvar)
library(splines)
library(tidyverse)
library(magrittr)
library(ISLR)
library(caret)
library(e1071)
library(MASS)
library(neuralnet)
library(tensorflow)
library(keras)
library(quantmod)
library(dplyr)
```


```{r}
data <- read.csv("data.csv")

```


```{r}
data$Net.Income.Flag <- NULL
data <- data[, !names(data) %in% c("ROA.B..before.interest.and.depreciation.after.tax", 
           "ROA.C..before.interest.and.depreciation.before.interest",
           "Persistent.EPS.in.the.Last.Four.Seasons",
           "Operating.Profit.Per.Share..Yuan...",
           "Current.Liabilities.Equity",
           "Current.Liability.to.Equity",
           "Operating.Gross.Margin",
           "Pre.tax.net.Interest.Rate",
           "Operating.Profit.Rate")]
```


```{r, warning=FALSE}
#Scale
library(corrgram)
data$Bankrupt. <- as.factor(data$Bankrupt.)
head(data)
```

```{r}
set.seed(1000)
splitSample <- sample(1:2, size=nrow(data), prob=c(0.9,0.1), replace = TRUE)

train_set <- data[splitSample==1,]
valid_set <- data[splitSample==2,]
```

```{r}
bankrupts = 0
for (i in train_set$Bankrupt.){
  if (as.integer(i) == "1"){
    bankrupts = bankrupts + 1
  }
}
print("Training Set:")
paste("Bankrupts:", bankrupts)
paste("No Bankrupts:", length(train_set[,1]) - bankrupts)
print("")

bankrupts.2 = 0
for (i in valid_set$Bankrupt.){
  if (as.integer(i) == "1"){
    bankrupts.2 = bankrupts.2 + 1
  }
}
print("Valid Set:")
paste("Bankrupts:", bankrupts.2)
paste("No Bankrupts:", length(valid_set[,1]) - bankrupts.2)
```


```{r}
#Standardize sets
count = 2
check = 0
while(count < length(data[3,]) && check == 0){
  count = count + 1
  if(colnames(data[1,])[count] == "Liability.Assets.Flag"){
    check = 1
  }
}
```

```{r}
for (i in 2:length(data[3,])){
  if(i != count){
    means = mean(train_set[,i])
    sds = sd(train_set[,i])
    valid_set[,i] = (valid_set[,i]-means)/sds 
  }
}

train_liability <- train_set[,count]

total_col <- length(data[3,])-1

train_set[,count] <- NULL

train_set[,2:total_col] <- scale(train_set[,2:total_col])

train_set[,total_col+1] <- train_liability

valid_liability <- valid_set[,count]
valid_set[,count] <- NULL
valid_set[,total_col+1] <- valid_liability

colnames(train_set)[total_col+1] <- "Liability.Assets.Flag"
colnames(valid_set)[total_col+1] <- "Liability.Assets.Flag"
```

```{r}
#10-fold CV
control <- trainControl(method="cv", number=10)
```


```{r, warning=FALSE}
#Logistic Regression
fit.glm <- caret::train(Bankrupt. ~ .,
                  data = train_set,
                  method = "glm",
                  family = "binomial",
                  trControl = control)
fit.glm
```

```{r}
#Random Forest
library(randomForest)

train_x <- train_set[,2:total_col+1]
train_y <- train_set$Bankrupt.

tuneRF(train_x, train_y, ntreeTry = 500)
```

```{r}
tunegrid <- expand.grid(.mtry=c(9))
control <- trainControl(method = "cv", number = 10)
fit.rf<- caret::train(Bankrupt.~., data=train_set, method = 'rf', metric = "Accuracy", tuneGrid = tunegrid)
fit.rf
```

```{r}
control.radial <- trainControl(method="cv", number=10)
fit.svm.radial <- caret::train(Bankrupt.~., data = train_set, method="svmRadial", trControl=control.radial, tuneLength = 10)
```

```{r}
fit.svm.radial$bestTune
```

```{r}
#KNN
fit.knn <- caret::train(Bankrupt.~., data=train_set, method="knn", trControl=control)
fit.knn$bestTune
fit.knn
```

```{r}
#SVM Sigmoid
cost <- c(0.001, 0.01, 0.1, 1, 10, 1/dim(train_set))
gamma <- c(0.01, 0.1, 0.25, 0.5, 1)
sigmoid_svms_accu_mean <- data.frame(
  cost = 0,
  gamma = 0,
  accuracy = 0
)
```


```{r}
j = 1
for(c in cost){
    for (g in gamma){
      sigmoid_svms_accu <- c()
      for (i in length(10)){
        
        splitSample <- sample(1:2, size=nrow(train_set), prob=c(0.9,0.1), replace = TRUE)
        train <- train_set[splitSample==1,]
        test <- train_set[splitSample==2,]
        sigmoid_svms <- svm(Bankrupt. ~., data = train, kernel = "sigmoid", cost = c, gamma = g)
        predict.svms <- predict(sigmoid_svms, test)
        cm.svms <- confusionMatrix(predict.svms, test$Bankrupt.)
        sigmoid_svms_accu[i] <- cm.svms$overall['Accuracy']
      }
      new_row = list(cost = c, gamma= g, accuracy = mean(sigmoid_svms_accu))
      sigmoid_svms_accu_mean = rbind(sigmoid_svms_accu_mean,new_row)
      j = j +1
  }
}
```

```{r}
max_accuracy = 0
index = 1
j = 1
for(i in sigmoid_svms_accu_mean$accuracy){
  if(i > max_accuracy){
    max_accuracy = i
    index = j
  }
  j = j+1
}

#sigmoid_svms_accu_mean[which.max(sigmoid_svms_accu_mean$accuracy),]
#which.max(sigmoid_svms_accu_mean$accuracy)

sigmoid_svms <- svm(Bankrupt. ~., data = train_set, kernel = "sigmoid", cost = sigmoid_svms_accu_mean[index,1], gamma = sigmoid_svms_accu_mean[index,2])
```

```{r, message=FALSE, warning=FALSE}
# Define grid of hyperparameters
xgboost.grid <- expand.grid(
  nrounds = c(100),
  max_depth = c(2, 4, 6),
  eta = c(0.01, 0.05, 0.1),
  gamma = c(0, 0.1, 0.2),
  colsample_bytree = c(0.5, 0.75, 1),
  min_child_weight = c(1, 3, 5),
  subsample = c(0.5, 0.75, 1)
)

# Define cross-validation scheme
ctrl <- trainControl(
  method = "cv",
  number = 1,
  verboseIter = FALSE,
  allowParallel = TRUE
  # numberParallel = 4
)

# Train the model using cross-validation
invisible({capture.output({fit.xgb_model <- caret::train(
  Bankrupt. ~ .,
  data = train_set,
  method = "xgbTree",
  trControl = ctrl,
  tuneGrid = xgboost.grid,
  nthread = 4
)
})})
```


```{r, warning=FALSE}
#Validation Tests

#                           Actually Positive        Actually Negative
#                           --------------------     --------------------
#    Predicted positive     True positives (TP)      False positives (FP)
#    Predicted negative     False negatives (FN)     True negatives (TN)

#SENSITIVITY = TP/(TP+FN)
#SPECIFICITY = TN/(TN+FP)
predict.glm <- predict(fit.glm, valid_set)
cm.glm <- confusionMatrix(predict.glm, valid_set$Bankrupt., positive = "0")
predictions.rf <- predict(fit.rf, valid_set)
cm.rf <- confusionMatrix(predictions.rf, valid_set$Bankrupt.)
predict.svm <- predict(fit.svm.radial, valid_set)
cm.svm <- confusionMatrix(predict.svm, valid_set$Bankrupt.)
predict.knn <- predict(fit.knn, valid_set)
cm.knn <- confusionMatrix(predict.knn, valid_set$Bankrupt.)

predict.svm.sigmoid <- predict(sigmoid_svms, valid_set)
cm.svm.sigmoid <- confusionMatrix(predict.svm.sigmoid, valid_set$Bankrupt.)

predict.xgb <- predict(fit.xgb_model, valid_set)
cm.xgb <- confusionMatrix(predict.xgb, valid_set$Bankrupt.)
```

```{r}
print("LR")
cm.glm$overall['Accuracy']
cm.glm$byClass['Sensitivity']
cm.glm$byClass['Specificity']
print("KNN")
cm.knn$overall['Accuracy']
cm.knn$byClass['Sensitivity']
cm.knn$byClass['Specificity']
print("RF")
cm.rf$overall['Accuracy']
cm.rf$byClass['Sensitivity']
cm.rf$byClass['Specificity']
print("SVM Radial")
cm.svm$overall['Accuracy']
cm.svm$byClass['Sensitivity']
cm.svm$byClass['Specificity']
print("SVM Sigmoidal")
cm.svm.sigmoid$overall['Accuracy']
cm.svm.sigmoid$byClass['Sensitivity']
cm.svm.sigmoid$byClass['Specificity']
print("XGBoost")
cm.xgb$overall['Accuracy']
cm.xgb$byClass['Sensitivity']
cm.xgb$byClass['Specificity']
```

```{r}
print("Logistic Regression: ")
cm.glm
print("")
print("KNN Regression: ")
cm.knn
print("")
print("Random Forest: ")
cm.rf
print("")
print("Support Vector Machine Radial: ")
cm.svm
print("")
print("Support Vector Machine Sigmoidal: ")
cm.svm.sigmoid
print("")
print("XGBoost: ")
cm.xgb
```

```{r, eval=FALSE}
rmarkdown::render("ST694Project copy.Rmd", output_format = "pdf_document")
```

